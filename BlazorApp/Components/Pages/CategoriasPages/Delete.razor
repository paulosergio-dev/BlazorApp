@page "/categorias/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorApp.Models
@inject IDbContextFactory<BlazorApp.Data.AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Deletar categorias</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Categorias</h2>
    <hr />
    @if (categorias is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Titulo</dt>
            <dd class="col-sm-10">@categorias.Titulo</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Descricao</dt>
            <dd class="col-sm-10">@categorias.Descricao</dd>
        </dl>
        <EditForm method="post" Model="categorias" OnValidSubmit="DeleteCategorias" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(categorias is null)">Delete</button> |
            <a href="/categorias">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Categorias? categorias;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        categorias = await context.Categorias.FirstOrDefaultAsync(m => m.Id == Id);

        if (categorias is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteCategorias()
    {
        using var context = DbFactory.CreateDbContext();
        context.Categorias.Remove(categorias!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/categorias");
    }
}
